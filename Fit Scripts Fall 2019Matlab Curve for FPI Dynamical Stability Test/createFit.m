function [fitresult, gof] = createFit(X, Y)
%CREATEFIT(X,Y)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : X
%      Y Output: Y
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 12-Sep-2019 15:13:19

%% Initialization

% Initialize arrays to store fits and goodness-of-fit.
fitresult = cell( 2, 1 );
gof = struct( 'sse', cell( 2, 1 ), ...
    'rsquare', [], 'dfe', [], 'adjrsquare', [], 'rmse', [] );


%% Fit: 'untitled fit 1'.
[xData, yData] = prepareCurveData( X, Y );

% Set up fittype and options.
ft = fittype( 'a1*exp(-((x-b1)/c1)^2)', 'independent', 'x', 'dependent', 'y' );
%ft  = fittype('P1./((x - P2).^2 + P3)','independent', 'x', 'dependent', 'y'); % For the three parameter Lorentzian fit
%ft = fittype('1./(P1(x.^2 + 1))','independent', 'x', 'dependent', 'y'); % Single parameter Lorentzian fit equation
%ft = fittype( 'a1*exp(-((x-b1)/c1)^2)+ a2*exp(-((x-b2)/c2)^2)', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
%opts.StartPoint = [0.00092075417586468 0.444397844701833 0.66560464652254];
opts.StartPoint = [7.1 0.2002 0.0002859]; % Gives the initial guess

% Fit model to data.
[fitresult{1}, gof(1)] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'untitled fit 1' );
h = plot( fitresult{1}, xData, yData );
%h = plot( fitresult, xData, yData );
legend( h, 'Y vs. X', 'untitled fit 1', 'Location', 'NorthEast' );
% Label axes
xlabel X
ylabel Y
grid on


